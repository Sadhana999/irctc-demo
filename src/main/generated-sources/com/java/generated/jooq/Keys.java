/*
 * This file is generated by jOOQ.
 */
package com.java.generated.jooq;


import com.java.generated.jooq.tables.Booking;
import com.java.generated.jooq.tables.Seat;
import com.java.generated.jooq.tables.Train;
import com.java.generated.jooq.tables.User;
import com.java.generated.jooq.tables.records.BookingRecord;
import com.java.generated.jooq.tables.records.SeatRecord;
import com.java.generated.jooq.tables.records.TrainRecord;
import com.java.generated.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * irctc.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BookingRecord> KEY_BOOKING_PRIMARY = Internal.createUniqueKey(Booking.BOOKING, DSL.name("KEY_booking_PRIMARY"), new TableField[] { Booking.BOOKING.BOOKING_ID }, true);
    public static final UniqueKey<SeatRecord> KEY_SEAT_PRIMARY = Internal.createUniqueKey(Seat.SEAT, DSL.name("KEY_seat_PRIMARY"), new TableField[] { Seat.SEAT.SEAT_ID }, true);
    public static final UniqueKey<SeatRecord> KEY_SEAT_SEAT_NUMBER_UNIQUE = Internal.createUniqueKey(Seat.SEAT, DSL.name("KEY_seat_seat_number_UNIQUE"), new TableField[] { Seat.SEAT.SEAT_NUMBER }, true);
    public static final UniqueKey<TrainRecord> KEY_TRAIN_PRIMARY = Internal.createUniqueKey(Train.TRAIN, DSL.name("KEY_train_PRIMARY"), new TableField[] { Train.TRAIN.TRAIN_ID }, true);
    public static final UniqueKey<TrainRecord> KEY_TRAIN_TRAIN_NUMBER = Internal.createUniqueKey(Train.TRAIN, DSL.name("KEY_train_train_number"), new TableField[] { Train.TRAIN.TRAIN_NUMBER }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.USER_ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USER_NAME_UNIQUE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_user_name_UNIQUE"), new TableField[] { User.USER.USER_NAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookingRecord, SeatRecord> BOOKING_SEAT_ID = Internal.createForeignKey(Booking.BOOKING, DSL.name("booking.seat_id"), new TableField[] { Booking.BOOKING.SEAT_ID }, Keys.KEY_SEAT_PRIMARY, new TableField[] { Seat.SEAT.SEAT_ID }, true);
    public static final ForeignKey<BookingRecord, TrainRecord> BOOKING_TRAIN_ID = Internal.createForeignKey(Booking.BOOKING, DSL.name("booking.train_id"), new TableField[] { Booking.BOOKING.TRAIN_ID }, Keys.KEY_TRAIN_PRIMARY, new TableField[] { Train.TRAIN.TRAIN_ID }, true);
}

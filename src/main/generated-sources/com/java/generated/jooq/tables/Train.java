/*
 * This file is generated by jOOQ.
 */
package com.java.generated.jooq.tables;


import com.java.generated.jooq.Irctc;
import com.java.generated.jooq.Keys;
import com.java.generated.jooq.tables.records.TrainRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Train extends TableImpl<TrainRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>irctc.train</code>
     */
    public static final Train TRAIN = new Train();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainRecord> getRecordType() {
        return TrainRecord.class;
    }

    /**
     * The column <code>irctc.train.train_id</code>.
     */
    public final TableField<TrainRecord, String> TRAIN_ID = createField(DSL.name("train_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.train_number</code>.
     */
    public final TableField<TrainRecord, String> TRAIN_NUMBER = createField(DSL.name("train_number"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.train_name</code>.
     */
    public final TableField<TrainRecord, String> TRAIN_NAME = createField(DSL.name("train_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.source</code>.
     */
    public final TableField<TrainRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.destination</code>.
     */
    public final TableField<TrainRecord, String> DESTINATION = createField(DSL.name("destination"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.created_by</code>.
     */
    public final TableField<TrainRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.created_date</code>.
     */
    public final TableField<TrainRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>irctc.train.modified_by</code>.
     */
    public final TableField<TrainRecord, String> MODIFIED_BY = createField(DSL.name("modified_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>irctc.train.modified_date</code>.
     */
    public final TableField<TrainRecord, LocalDateTime> MODIFIED_DATE = createField(DSL.name("modified_date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>irctc.train.status</code>.
     */
    public final TableField<TrainRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Train(Name alias, Table<TrainRecord> aliased) {
        this(alias, aliased, null);
    }

    private Train(Name alias, Table<TrainRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>irctc.train</code> table reference
     */
    public Train(String alias) {
        this(DSL.name(alias), TRAIN);
    }

    /**
     * Create an aliased <code>irctc.train</code> table reference
     */
    public Train(Name alias) {
        this(alias, TRAIN);
    }

    /**
     * Create a <code>irctc.train</code> table reference
     */
    public Train() {
        this(DSL.name("train"), null);
    }

    public <O extends Record> Train(Table<O> child, ForeignKey<O, TrainRecord> key) {
        super(child, key, TRAIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Irctc.IRCTC;
    }

    @Override
    public UniqueKey<TrainRecord> getPrimaryKey() {
        return Keys.KEY_TRAIN_PRIMARY;
    }

    @Override
    public List<UniqueKey<TrainRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TRAIN_TRAIN_NUMBER);
    }

    @Override
    public Train as(String alias) {
        return new Train(DSL.name(alias), this);
    }

    @Override
    public Train as(Name alias) {
        return new Train(alias, this);
    }

    @Override
    public Train as(Table<?> alias) {
        return new Train(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(String name) {
        return new Train(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(Name name) {
        return new Train(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Train rename(Table<?> name) {
        return new Train(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
